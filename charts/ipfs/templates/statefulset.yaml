apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "ipfs.fullname" . }}
  labels:
    app: {{ template "ipfs.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
spec:
  replicas: {{ .Values.replicaCount }}
  serviceName: {{ template "ipfs.name" . }}
  selector:
    matchLabels:
      {{- include "ipfs.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "ipfs.selectorLabels" . | nindent 8 }}
    spec:
      securityContext:
        # The image runs as uid 1000 by default, and needs to be able to write to
        # the persistent volume to be able to start.
        fsGroup: 1000
        runAsUser: 1000
      initContainers:
      - name: init-repo
        image: ipfs/go-ipfs:v0.4.11@sha256:e977e1560b960933061efc694c937d711ce1a51aa4a5239acfdff01504b11054
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        command: ['/bin/sh', '/etc/ipfs-config/init.sh']
        volumeMounts:
        - name: ipfs-storage
          mountPath: /data/ipfs
        - name: config
          mountPath: /etc/ipfs-config
      - name: init-peers
        image: ipfs/go-ipfs:v0.4.11@sha256:e977e1560b960933061efc694c937d711ce1a51aa4a5239acfdff01504b11054
        command: ['/bin/sh', '/etc/ipfs-config/peers-kubernetes-refresh.sh']
        volumeMounts:
        - name: ipfs-storage
          mountPath: /data/ipfs
        - name: config
          mountPath: /etc/ipfs-config
      containers:
      - name: {{ .Chart.Name }}
        image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        ports:
{{- if .Values.swarm.enabled }}
        - containerPort: 4001
          name: swarm
          protocol: TCP
        - containerPort: 4001
          name: swarm-udp
          protocol: UDP
{{- end }}
        - containerPort: 5001
          name: api
        - containerPort: 8080
          name: gateway
        volumeMounts:
          - name: ipfs-storage
            mountPath: /data/ipfs
        resources:
{{ toYaml .Values.resources | indent 10 }}
  {{- if .Values.persistence.enabled }}
      volumes:
        - name: ipfs-storage
          persistentVolumeClaim:
            claimName: {{ template "ipfs.fullname" . }}-ipfs-storage
  {{- else }}
      volumes:
        - name: ipfs-storage
          emptyDir: {}
  {{- end }}
        - name: config
          configMap:
            name: ipfs-config